{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\TestProjects\\\\ReactNative\\\\App\\\\App.tsx\";\nimport * as yup from \"yup\";\nimport { Formik } from \"formik\";\nimport React, { Component, Fragment } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport axios from \"axios\";\n\nvar handleSubmit = function handleSubmit(values) {\n  var myData = JSON.stringify(values);\n  axios.post(\"http://localhost:35118/api/values\", values).then(function (response) {\n    console.log(response);\n  }).catch(function (error) {\n    console.log(error);\n  });\n};\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Formik, {\n        initialValues: {\n          email: \"\",\n          password: \"\",\n          confirmPassword: \"\"\n        },\n        onSubmit: function onSubmit(values) {\n          return handleSubmit(values);\n        },\n        validationSchema: yup.object().shape({\n          email: yup.string().email().required(),\n          password: yup.string().min(6).required()\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        }\n      }, function (_ref) {\n        var values = _ref.values,\n            handleChange = _ref.handleChange,\n            errors = _ref.errors,\n            setFieldTouched = _ref.setFieldTouched,\n            touched = _ref.touched,\n            isValid = _ref.isValid,\n            handleSubmit = _ref.handleSubmit;\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          }\n        }, React.createElement(TextInput, {\n          value: values.email,\n          onChangeText: handleChange(\"email\"),\n          onBlur: function onBlur() {\n            return setFieldTouched(\"email\");\n          },\n          placeholder: \"E-mail\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          }\n        }), touched.email && errors.email && React.createElement(Text, {\n          style: {\n            fontSize: 10,\n            color: \"red\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          }\n        }, errors.email), React.createElement(TextInput, {\n          value: values.password,\n          onChangeText: handleChange(\"password\"),\n          placeholder: \"Password\",\n          onBlur: function onBlur() {\n            return setFieldTouched(\"password\");\n          },\n          secureTextEntry: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          }\n        }), touched.password && errors.password && React.createElement(Text, {\n          style: {\n            fontSize: 10,\n            color: \"red\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          }\n        }, errors.password));\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["D:/TestProjects/ReactNative/App/App.tsx"],"names":["yup","Formik","React","Component","Fragment","axios","handleSubmit","values","myData","JSON","stringify","post","then","response","console","log","catch","error","App","email","password","confirmPassword","object","shape","string","required","min","handleChange","errors","setFieldTouched","touched","isValid","fontSize","color"],"mappings":"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","sourcesContent":["import * as yup from \"yup\";\nimport { Formik } from \"formik\";\n\nimport React, { Component, Fragment } from \"react\";\nimport { TextInput, Text, Button, Alert } from \"react-native\";\n\nimport axios from \"axios\";\n\nconst handleSubmit = (values: { email: string; password: string; confirmPassword: string; }) => {\n  //Alert.alert(JSON.stringify(values));\n  var myData = JSON.stringify(values);\n  axios\n    .post(\n      \"http://localhost:35118/api/values\",\n      values\n    )\n    .then(function(response) {\n      console.log(response);\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n};\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Formik\n        initialValues={{ email: \"\", password: \"\", confirmPassword: \"\" }}\n        onSubmit={values => handleSubmit(values)}\n        validationSchema={yup.object().shape({\n          email: yup\n            .string()\n            .email()\n            .required(),\n          password: yup\n            .string()\n            .min(6)\n            .required()\n        })}\n      >\n        {({\n          values,\n          handleChange,\n          errors,\n          setFieldTouched,\n          touched,\n          isValid,\n          handleSubmit\n        }) => (\n          <Fragment>\n            <TextInput\n              value={values.email}\n              onChangeText={handleChange(\"email\")}\n              onBlur={() => setFieldTouched(\"email\")}\n              placeholder=\"E-mail\"\n            />\n            {touched.email && errors.email && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>{errors.email}</Text>\n            )}\n            <TextInput\n              value={values.password}\n              onChangeText={handleChange(\"password\")}\n              placeholder=\"Password\"\n              onBlur={() => setFieldTouched(\"password\")}\n              secureTextEntry={true}\n            />\n            {touched.password && errors.password && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>\n                {errors.password}\n              </Text>\n            )}\n             \n          </Fragment>\n        )}\n      </Formik>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}